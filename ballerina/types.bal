// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;

# Information about the owner of the bot user.
public type Owner record {
    # The type of the owner, which is "user".
    string 'type?;
    BotUser user?;
};

public type DatabaseQueryResponse record {
    # The type of the response object (e.g., "list")
    string 'object?;
    PageResult[] results?;
    # The cursor for the next page of results, if applicable.
    string? next_cursor?;
    # Indicates if there are more results available.
    boolean has_more?;
    # The type of the query response.
    string 'type?;
};

public type CreateDatabaseRequest_properties_1 record {
    record {} people?;
};

# The filter item
public type DatabaseContent_filter_or record {
    # The filter property
    string property?;
    DatabaseContent_filter_select 'select?;
};

# The summary of the database
public type PageObjectProperties_Summary record {
    # The ID of the summary
    string id?;
    # The summary content
    record {} text?;
    # The type of the object
    string 'type?;
};

# multi_select values
public type PageObjectProperties_Author_multi_select record {
    # The multi_select option
    PageObjectProperties_Author_multi_select_options[] options?;
};

# Result Details
public type ResultDetails record {
    # The created date/time
    string created_time?;
    # Indicates whether it has child object or not
    boolean has_children?;
    # Object ID
    string id?;
    # The last date/time
    string last_edited_time?;
    # Object Category
    string 'object?;
    # object type
    string 'type?;
    # Unsupported
    record {} unsupported?;
};

public type CreateDatabaseRequest_properties_Price record {
    CreateDatabaseRequest_properties_Price_number number;
};

public type RichText record {
    # The type of rich text content.
    string 'type?;
    TextContent text?;
};

public type CreateDatabaseRequest_properties record {
    CreateDatabaseRequest_properties_Name Name?;
    CreateDatabaseRequest_properties_Description Description?;
    CreateDatabaseRequest_properties_In\ stock In\ stock?;
    CreateDatabaseRequest_properties_Food\ group Food\ group?;
    CreateDatabaseRequest_properties_Price Price?;
    CreateDatabaseRequest_properties_Last\ ordered Last\ ordered?;
    CreateDatabaseRequest_properties_Store\ availability Store\ availability?;
    CreateDatabaseRequest_properties_1 \+1?;
    CreateDatabaseRequest_properties_Photo Photo?;
};

# Sort items
public type DatabaseContent_sorts record {
    # The sort direction
    string direction?;
    # The sort property
    string property?;
};

# The database object
public type Database record {
    # The created date/time
    string created_time?;
    # Database ID
    string id?;
    # The last edited date/time
    string last_edited_time?;
    # Object type "database"
    string 'object?;
    ObjectProperties properties?;
    # Title of the database
    Database_title[] title?;
};

# Filter detail
public type DatabaseContent_filter record {
    # The filter set
    DatabaseContent_filter_or[] or?;
};

# The content of the rich text item.
public type PropertyItemResult_property_item_rich_text_text record {
    # The content of the text.
    string content?;
    # The link associated with the text.
    string? link?;
};

public type CreateDatabaseRequest_properties_Name record {
    record {} title?;
};

# The text detail
public type Database_text record {
    # The text content
    string content?;
    # The link to the text
    anydata? link?;
};

# Represents the Headers record for the operation: deleteV1BlocksId
public type DeleteV1BlocksIdHeaders record {
    string? Notion\-Version?;
};

public type ArchivePageRequest record {
    boolean archived?;
};

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # Configurations related to client authentication
    http:BearerTokenConfig auth;
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    ClientHttp1Settings http1Settings?;
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings?;
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 60;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache?;
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits?;
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
|};

public type CreateDatabaseRequest_properties_Food\ group_select_options record {
    string name?;
    string color?;
};

public type CreateDatabaseRequest_properties_Photo record {
    record {} files?;
};

# Represents the Headers record for the operation: postV1Comments
public type PostV1CommentsHeaders record {
    string? Notion\-Version?;
    string? Content\-Type?;
};

# The database type details
public type PageObjectProperties_Type record {
    # The type ID
    string id?;
    PageObjectProperties_Publisher_select 'select?;
    # The object type
    string 'type?;
};

public type PageResult_properties record {
    Property Store_availability?;
    Property Photo?;
    Property Description?;
};

# Reference to the user who created the comment.
public type UserReference record {
    # The object type, which is "user".
    string 'object?;
    # The unique identifier for the user.
    string id?;
};

# Represents the Queries record for the operation: getV1Comments
public type GetV1CommentsQueries record {
    string block_id?;
    int page_size?;
};

# The rollup details for the property item.
public type RollupListPropertyItem_property_item_rollup record {
    # The aggregation function used in the rollup (e.g., "sum").
    string 'function?;
    # The type of the rollup.
    string 'type?;
    # Placeholder for incomplete rollup details.
    record {} incomplete?;
};

public type CreateDatabaseRequest_properties_Food\ group_select record {
    CreateDatabaseRequest_properties_Food\ group_select_options[] options?;
};

# Represents the Headers record for the operation: getV1UsersId
public type GetV1UsersIdHeaders record {
    string? Notion\-Version?;
};

# Information about the person associated with the user.
public type Person record {
    # The email address of the associated person.
    string email?;
};

public type CommentRequest_text record {
    string content?;
};

# Information about the associated user.
public type BotUser record {
    # The object type of the associated user.
    string 'object?;
    # The unique identifier for the associated user.
    string id?;
    # The name of the associated user.
    string name?;
    # URL of the avatar image associated with the user.
    string? avatar_url?;
    # The type of the associated entity, which is "person".
    string 'type?;
    Person person?;
};

public type CreateDatabaseRequest record {
    CreateDatabaseRequest_parent parent?;
    CreateDatabaseRequest_title[] title?;
    CreateDatabaseRequest_properties properties?;
};

public type PropertyItem_rich_text_annotations record {
    boolean bold?;
    boolean italic?;
    boolean strikethrough?;
    boolean underline?;
    boolean code?;
    string color?;
};

# The response body for users list
public type PaginatedUsers record {
    # Array of Users
    User[] results?;
    # Next curser position of the user list
    string? next_cursor?;
    # Indicates whether there are more user records or not
    boolean has_more?;
};

public type CreateDatabaseRequest_properties_Store\ availability record {
    CreateDatabaseRequest_properties_Food\ group_select multi_select;
};

public type Metadata record {
    # The date and time when the item was created.
    string createdDate?;
    # The date and time when the item was last updated.
    string updatedDate?;
    # The list of tags associated with the item.
    string[] tags?;
};

# Represents the Headers record for the operation: patchV1BlocksId
public type PatchV1BlocksIdHeaders record {
    string? Notion\-Version?;
};

public type TitleItem record {
    string 'type?;
    TextObject text?;
    AnnotationsObject annotations?;
    string plain_text?;
    string? href?;
};

# Select details of publisher
public type PageObjectProperties_Publisher_select record {
    # The set of options
    PageObjectProperties_Publisher_select_options[] options?;
};

public type ChildBlockContent record {
    # A list of child blocks.
    Block[] children?;
};

# The set of items in options
public type PageObjectProperties_Publisher_select_options record {
    # The color
    string color?;
    # The ID of the option
    string id?;
    # The name of the option
    string name?;
};

# The response for block children
public type BlockChildrenResponse record {
    # Indicates whether it has more objects or not
    boolean has_more?;
    # Incidates the position of the response list
    anydata? next_cursor?;
    # The response object
    string 'object?;
    # The array of result details
    ResultDetails[] results?;
};

public type PageObjectProperties_PublishingRelease\ Date record {
    record {} date?;
    string id?;
    string 'type?;
};

# Represents the Headers record for the operation: patchV1PagesId
public type PatchV1PagesIdHeaders record {
    string? Notion\-Version?;
};

public type CreateDatabaseRequest_title record {
    string 'type?;
    CreateDatabaseRequest_text text?;
};

public type Property_files record {
    # The name of the file.
    string name?;
    # The URL of the file.
    string url?;
};

# Represents the Headers record for the operation: postV1Pages
public type PostV1PagesHeaders record {
    string? Authorization?;
    string? Notion\-Version?;
    string? Content\-Type?;
};

# Page Details
public type PageResponse record {
    # Indicates whether it is archived or not
    boolean archived?;
    # The created date/time
    string created_time?;
    # ID of the page
    string id?;
    # The last edited date/time
    string last_edited_time?;
    # The object type "page"
    string 'object?;
    PageResponse_parent parent?;
    PageObjectProperties properties?;
};

# Author of the database
public type PageObjectProperties_Author record {
    # Author ID
    string id?;
    PageObjectProperties_Author_multi_select multi_select?;
    # The type of the object
    string 'type?;
};

public type Property record {
    # The ID of the property.
    string id?;
    # The type of the property (e.g., "multi_select").
    string 'type?;
    # List of selected options for multi_select.
    string[] multi_select?;
    Property_files[] files?;
};

public type DatabasePatchRequest record {
    TitleItem[] title?;
    DatabasePatchRequest_properties properties?;
};

public type PropertyItem_rich_text record {
    string 'type?;
    PropertyItem_rich_text_text text?;
    PropertyItem_rich_text_annotations annotations?;
    string plain_text?;
    string? href?;
};

public type PageParent record {
    # The type of parent object (e.g., "database_id").
    string 'type?;
    # The ID of the database that this page belongs to.
    string database_id?;
};

# Represents the Headers record for the operation: getV1UsersMe
public type GetV1UsersMeHeaders record {
    string? Notion\-Version?;
};

# The annotation
public type Database_annotations record {
    # Indicates whether the title is bold or not
    boolean bold?;
    # Indicates whether the title is code or not
    boolean code?;
    # Indicates whether the title is color or not
    string color?;
    # Indicates whether the title is italic or not
    boolean italic?;
    # Indicates whether the title is strikethrough or not
    boolean strikethrough?;
    # Indicates whether the title is underline or not
    boolean underline?;
};

# The name of the object
public type ObjectProperties_Name record {
    # Name ID
    string id?;
    # tilte
    record {} title?;
    # title Type
    string 'type?;
};

# Annotations like bold, italic, etc.
public type PropertyItemResult_property_item_rich_text_annotations record {
    # Indicates if the text is bold.
    boolean bold?;
    # Indicates if the text is italic.
    boolean italic?;
    # Indicates if the text is strikethrough.
    boolean strikethrough?;
    # Indicates if the text is underlined.
    boolean underline?;
    # Indicates if the text is in code format.
    boolean code?;
    # The color of the text.
    string color?;
};

# Provides settings related to HTTP/1.x protocol.
public type ClientHttp1Settings record {|
    # Specifies whether to reuse a connection for multiple requests
    http:KeepAlive keepAlive = http:KEEPALIVE_AUTO;
    # The chunking behaviour of the request
    http:Chunking chunking = http:CHUNKING_AUTO;
    # Proxy server related options
    ProxyConfig proxy?;
|};

# Represents the Headers record for the operation: getV1DatabasesId
public type GetV1DatabasesIdHeaders record {
    string? Notion\-Version?;
};

# Represents the Headers record for the operation: postV1Databases
public type PostV1DatabasesHeaders record {
    string? Notion\-Version?;
    string? Content\-Type?;
};

public type TextContent record {
    # The actual text content.
    string content?;
    LinkContent? link?;
};

public type CommentRequest record {
    CommentRequest_parent parent?;
    CommentRequest_rich_text[] rich_text?;
};

# Read details
public type PageObjectProperties_Read record {
    # checkbox details
    record {} checkbox?;
    # ID of the checkbox
    string id?;
    # The object type
    string 'type?;
};

# The status ID
public type PageObjectProperties_Status record {
    # The ID of the status
    string id?;
    PageObjectProperties_Publisher_select 'select?;
    # The object type
    string 'type?;
};

public type LinkContent record {
    # The URL associated with the text.
    string url?;
};

# Represents a list of rollup property items in the response.
public type RollupListPropertyItem record {
    # The object type, which is "list".
    string 'object?;
    # A list of rollup property items returned in the response.
    PropertyItem[] results?;
    # A cursor for fetching the next set of results.
    string? next_cursor?;
    # Indicates whether there are more results available.
    boolean has_more?;
    RollupListPropertyItem_property_item property_item?;
};

# The name of the object
public type PageObjectProperties_Name record {
    # Name ID
    string id?;
    # title
    record {}[] title?;
    # title Type
    string 'type?;
};

# Represents a list of property items in the response.
public type PropertyItemResult record {
    # The object type, which is "list".
    string 'object?;
    # A list of property items returned in the response.
    PropertyItem[] results?;
    # A cursor for fetching the next set of results.
    string? next_cursor?;
    # Indicates whether there are more results available.
    boolean has_more?;
    # The URL for the next page of results.
    string next_url?;
    PropertyItemResult_property_item property_item?;
};

public type AnnotationsObject record {
    boolean bold?;
    boolean italic?;
    boolean strikethrough?;
    boolean underline?;
    boolean code?;
    string color?;
};

# Object Properties
public type ObjectProperties record {
    PageObjectProperties_Author Author?;
    PageObjectProperties_Link Link?;
    ObjectProperties_Name Name?;
    PageObjectProperties_Publisher Publisher?;
    PageObjectProperties_PublishingRelease\ Date Publishing\/Release\ Date?;
    PageObjectProperties_Read Read?;
    PageObjectProperties_Status Status?;
    PageObjectProperties_Summary Summary?;
    PageObjectProperties_Type Type?;
};

public type SearchItem record {
    # The unique identifier for the item.
    string id?;
    # The name of the item.
    string name?;
    # A brief description of the item.
    string description?;
    Metadata metadata?;
};

# Placeholder for any additional property item-related details.
public type PropertyItemResult_property_item record {
    # The unique identifier for the property item.
    string id?;
    # The next URL if available for pagination.
    string? next_url?;
    # The type of the property item.
    string 'type?;
    PropertyItemResult_property_item_rich_text rich_text?;
};

public type CreateDatabaseRequest_properties_Description record {
    record {} rich_text?;
};

# Represents the Headers record for the operation: patchV1DatabasesId
public type PatchV1DatabasesIdHeaders record {
    string? Notion\-Version?;
};

public type PropertyItem record {
    string 'object?;
    string id?;
    string 'type?;
    PropertyItem_rich_text rich_text?;
};

# Parent Page
public type PageResponse_parent record {
    # Database ID
    string database_id?;
    # The type of the object
    string 'type?;
};

# The select details
public type DatabaseContent_filter_select record {
    # The equals values
    string 'equals?;
};

public type CreateDatabaseRequest_properties_Food\ group record {
    CreateDatabaseRequest_properties_Food\ group_select 'select;
};

public type DatabasePatchRequest_properties record {
    WinePairing Wine\ Pairing?;
};

public type CreateDatabaseRequest_parent record {
    string 'type?;
    string page_id?;
};

# Details of the bot user.
public type Bot record {
    Owner owner?;
};

# Represents the Headers record for the operation: getV1Comments
public type GetV1CommentsHeaders record {
    string? Notion\-Version?;
};

# Represents the Headers record for the operation: getV1BlocksIdChildren
public type GetV1BlocksIdChildrenHeaders record {
    string? Notion\-Version?;
};

# Represents the Headers record for the operation: postV1Search
public type PostV1SearchHeaders record {
    string? Notion\-Version?;
    string? Content\-Type?;
};

public type PageResult record {
    # Type of the result object (e.g., "page").
    string 'object?;
    # Unique identifier of the page.
    string id?;
    # The time when the page was created.
    string created_time?;
    # The last time the page was edited.
    string last_edited_time?;
    User created_by?;
    User last_edited_by?;
    # URL of the cover image for the page (if any).
    string? cover?;
    # URL of the icon for the page (if any).
    string? icon?;
    PageParent parent?;
    # Whether the page is archived.
    boolean archived?;
    # Whether the page is in the trash.
    boolean in_trash?;
    PageResult_properties properties?;
};

# The contact detail
public type User_person record {
    # Email address
    string email?;
};

public type SearchResponse record {
    # The total number of items available.
    int totalCount?;
    # The list of items returned in the search.
    SearchItem[] items?;
};

# The rich text details for the property item.
public type PropertyItemResult_property_item_rich_text record {
    # The type of rich text (e.g., "text" or "mention").
    string 'type?;
    PropertyItemResult_property_item_rich_text_text text?;
    PropertyItemResult_property_item_rich_text_annotations annotations?;
    # The plain text content of the rich text.
    string plain_text?;
    # A URL associated with the rich text content.
    string? href?;
};

public type TextObject record {
    string content?;
    string? link?;
};

public type CreateDatabaseRequest_text record {
    string content?;
    string? link?;
};

public type PropertyItem_rich_text_text record {
    string content?;
    string? link?;
};

public type Block record {
    # The type of the block object.
    string 'object?;
    # The type of block (e.g., heading_2, paragraph).
    string 'type?;
    Heading2Content heading_2?;
    ParagraphContent paragraph?;
};

# Database content
public type DatabaseContent record {
    DatabaseContent_filter filter?;
    # Sorting details
    DatabaseContent_sorts[] sorts?;
};

# Represents the response for a delete block operation.
public type BlockResponse record {
    # The object type, which is "block" in this case.
    string 'object?;
    # The unique identifier for the block.
    string id?;
    Parent parent?;
    # The timestamp when the block was created.
    string created_time?;
    # The timestamp when the block was last edited.
    string last_edited_time?;
    UserReference created_by?;
    UserReference last_edited_by?;
    # Indicates whether the block has any child elements.
    boolean has_children?;
    # Indicates whether the block is archived.
    boolean archived?;
    # The type of block, in this case, "paragraph".
    string 'type?;
    Paragraph paragraph?;
};

# Represents the Headers record for the operation: getV1PagesId
public type GetV1PagesIdHeaders record {
    string? Notion\-Version?;
};

# Represents the response for retrieving comments.
public type CommentResponse record {
    # The object type, which is "list" in this case.
    string 'object?;
    # A list of comments returned in the response.
    Comment[] results?;
    # A cursor for fetching the next set of results. If null, there are no more results.
    string? next_cursor?;
    # Indicates whether there are more results available.
    boolean has_more?;
    # The type of object in the list, which is "comment" in this case.
    string 'type?;
    # Placeholder for any additional comment-related details or future extensions.
    record {} comment?;
};

public type SearchRequest record {
    string query?;
    SearchRequest_sort sort?;
};

# User detail
public type User record {
    # avatar URL
    anydata? avatar_url?;
    # User ID
    string id?;
    # Name of the User
    string name?;
    # The object type User
    string 'object?;
    User_person person?;
    # The object type
    string 'type?;
};

# Represents the Headers record for the operation: getV1PagesPage_idPropertiesProperty_id
public type GetV1PagesPage_idPropertiesProperty_idHeaders record {
    string? Notion\-Version?;
};

# The page content after update
public type PageUpdatedProperties record {
    # Indicates whether it is archived or not
    boolean archived?;
    # The created date/time
    string created_time?;
    # The ID of the Page
    string id?;
    # The last edited date/time
    string last_edited_time?;
    # The object type "page"
    string 'object?;
    ObjectProperties properties?;
};

# The parent information for the comment.
public type Parent record {
    # The type of parent, which is "page_id" in this case.
    string 'type?;
    # The unique identifier for the parent page.
    string page_id?;
};

public type PropertiesObject record {
    PropertyObject Description?;
    PropertyObject Price?;
    PropertyObject Photo?;
    PropertyObject Last_ordered?;
    PropertyObject Food_group?;
    PropertyObject Store_availability?;
    PropertyObject In_stock?;
    PropertyObject Name?;
};

public type Heading2Content record {
    # Rich text content for the heading.
    RichText[] rich_text?;
};

# Represents the Headers record for the operation: patchV1BlocksIdChildren
public type PatchV1BlocksIdChildrenHeaders record {
    string? Authorization?;
    string? Notion\-Version?;
    string? Content\-Type?;
};

public type CreateDatabaseRequest_properties_In\ stock record {
    record {} checkbox?;
};

# The option items
public type PageObjectProperties_Author_multi_select_options record {
    # Color of the database
    string color?;
    # ID of the database
    string id?;
    # Name of the Database
    string name?;
};

# Represents the Headers record for the operation: getV1Users
public type GetV1UsersHeaders record {
    string? Notion\-Version?;
};

# Placeholder for any additional rollup-related details.
public type RollupListPropertyItem_property_item record {
    # The unique identifier for the property item.
    string id?;
    # The next URL if available for pagination.
    string? next_url?;
    # The type of the property item.
    string 'type?;
    RollupListPropertyItem_property_item_rollup rollup?;
};

public type WinePairing record {
    # Placeholder for rich text content
    record {} rich_text?;
};

# Publisher Detail
public type PageObjectProperties_Publisher record {
    # Publisher ID
    string id?;
    PageObjectProperties_Publisher_select 'select?;
    # The type of the object
    string 'type?;
};

# Represents the Queries record for the operation: getV1BlocksIdChildren
public type GetV1BlocksIdChildrenQueries record {
    int page_size?;
};

public type CreateDatabaseRequest_properties_Last\ ordered record {
    record {} date?;
};

# Represents a number property item with a unique ID and value.
public type NumberPropertyItem record {
    # The object type, which is "property_item".
    string 'object?;
    # The unique identifier for the property item.
    string id?;
    # The type of the property item, which is "number" in this case.
    string 'type?;
    # The numerical value for the property item.
    int number?;
};

# The item sets
public type Database_title record {
    Database_annotations annotations?;
    # HyperLink
    anydata? href?;
    # Plain text
    string plain_text?;
    Database_text text?;
    # The type of the object
    string 'type?;
};

# Represents a comment object.
public type Comment record {
    # The object type, which is "comment".
    string 'object?;
    # The unique identifier for the comment.
    string id?;
    Parent parent?;
    # The unique identifier for the discussion the comment belongs to.
    string discussion_id?;
    # The timestamp when the comment was created.
    string created_time?;
    # The timestamp when the comment was last edited.
    string last_edited_time?;
    UserReference created_by?;
    # An array of rich text objects for the comment's content.
    RichText[] rich_text?;
};

# Represents the Headers record for the operation: postV1DatabasesIdQuery
public type PostV1DatabasesIdQueryHeaders record {
    string? Authorization?;
    string? Notion\-Version?;
    string? Content\-Type?;
};

public type UserObject record {
    string 'object?;
    string id?;
};

public type ParagraphContent record {
    # Rich text content for the paragraph.
    RichText[] rich_text?;
};

# Proxy server configurations to be used with the HTTP client endpoint.
public type ProxyConfig record {|
    # Host name of the proxy server
    string host = "";
    # Proxy server port
    int port = 0;
    # Proxy server username
    string userName = "";
    # Proxy server password
    @display {label: "", kind: "password"}
    string password = "";
|};

# Response containing bot user token details.
public type BotUserTokenResponse record {
    # The object type, which in this case is a user.
    string 'object?;
    # The unique identifier for the user.
    string id?;
    # The name of the bot user.
    string name?;
    # URL of the avatar image associated with the bot user.
    string? avatar_url?;
    # The type of the entity, which is "bot" in this case.
    string 'type?;
    Bot bot?;
};

# Details of the paragraph block, including the rich text content.
public type Paragraph record {
    # List of rich text elements in the paragraph.
    record {}[] rich_text?;
    # The color of the paragraph block.
    string color?;
};

# Represents the Headers record for the operation: getV1BlocksId
public type GetV1BlocksIdHeaders record {
    string? Notion\-Version?;
};

public type ParentObject record {
    string 'type?;
    string page_id?;
};

public type SearchRequest_sort record {
    "ascending"|"descending" direction?;
    "last_edited_time" timestamp?;
};

# Object Properties
public type PageObjectProperties record {
    PageObjectProperties_Author Author?;
    PageObjectProperties_Link Link?;
    PageObjectProperties_Name Name?;
    PageObjectProperties_Publisher Publisher?;
    PageObjectProperties_PublishingRelease\ Date Publishing\/Release\ Date?;
    PageObjectProperties_Read Read?;
    PageObjectProperties_Status Status?;
    PageObjectProperties_Summary Summary?;
    PageObjectProperties_Type Type?;
};

# Related links
public type PageObjectProperties_Link record {
    # Link ID
    string id?;
    # Link type
    string 'type?;
    # URL
    record {} url?;
};

public type CommentRequest_parent record {
    string page_id?;
};

public type CommentRequest_rich_text record {
    CommentRequest_text text?;
};

public type PropertyObject record {
    string id?;
    string name?;
    string 'type?;
    record {} rich_text?;
};

public type CreateDatabaseResponse record {
    string created_time?;
    ParentObject parent?;
    boolean in_trash?;
    record {}? icon?;
    anydata[] description?;
    TitleItem[] title?;
    UserObject created_by?;
    string url?;
    record {}? cover?;
    string? public_url?;
    boolean archived?;
    string last_edited_time?;
    boolean is_inline?;
    string id?;
    UserObject last_edited_by?;
    string request_id?;
    PropertiesObject properties?;
};

public type CreateDatabaseRequest_properties_Price_number record {
    string format?;
};
